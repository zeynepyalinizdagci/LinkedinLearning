{"ast":null,"code":"import { computed, effect, signal } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./analytics.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(analytics, http) {\n    this.analytics = analytics;\n    this.http = http;\n    this.unread = signal([]);\n    this.count = computed(() => {\n      return this.unread().length;\n    });\n    effect(() => {\n      this.analytics.track('MESSAGE_COUNT', this.count().toString());\n    });\n    this.http.get('/assets/mocks/messages.json').pipe(takeUntilDestroyed()).subscribe({\n      next: items => this.unread.set(items)\n    });\n  }\n  delete(selected) {\n    this.unread.update(items => {\n      return items.filter(item => item.id !== selected.id);\n    });\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.AnalyticsService), i0.ɵɵinject(i2.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["computed","effect","signal","takeUntilDestroyed","MessageService","constructor","analytics","http","unread","count","length","track","toString","get","pipe","subscribe","next","items","set","delete","selected","update","filter","item","id","i0","ɵɵinject","i1","AnalyticsService","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Projects\\Angular\\angular-essential-training-3266043\\src\\app\\services\\message.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, computed, effect, signal } from '@angular/core';\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\r\nimport { Message } from '../interfaces/message';\r\nimport { AnalyticsService } from './analytics.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n  public unread = signal<Message[]>([]);\r\n\r\n  public count = computed(() => {\r\n    return this.unread().length;\r\n  });\r\n\r\n  constructor(\r\n    private analytics: AnalyticsService,\r\n    private http: HttpClient,\r\n  ) {\r\n    effect(() => {\r\n      this.analytics.track('MESSAGE_COUNT', this.count().toString());\r\n    });\r\n\r\n    this.http\r\n      .get<Message[]>('/assets/mocks/messages.json')\r\n      .pipe(takeUntilDestroyed())\r\n      .subscribe({\r\n        next: items => this.unread.set(items)\r\n      });\r\n  }\r\n\r\n  public delete(selected: Message) {\r\n    this.unread.update(items => {\r\n      return items.filter((item) => item.id !== selected.id);\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,QAAQ,EAAEC,MAAM,EAAEC,MAAM,QAAQ,eAAe;AACpE,SAASC,kBAAkB,QAAQ,4BAA4B;;;;AAO/D,OAAM,MAAOC,cAAc;EAOzBC,YACUC,SAA2B,EAC3BC,IAAgB;IADhB,KAAAD,SAAS,GAATA,SAAS;IACT,KAAAC,IAAI,GAAJA,IAAI;IARP,KAAAC,MAAM,GAAGN,MAAM,CAAY,EAAE,CAAC;IAE9B,KAAAO,KAAK,GAAGT,QAAQ,CAAC,MAAK;MAC3B,OAAO,IAAI,CAACQ,MAAM,EAAE,CAACE,MAAM;IAC7B,CAAC,CAAC;IAMAT,MAAM,CAAC,MAAK;MACV,IAAI,CAACK,SAAS,CAACK,KAAK,CAAC,eAAe,EAAE,IAAI,CAACF,KAAK,EAAE,CAACG,QAAQ,EAAE,CAAC;IAChE,CAAC,CAAC;IAEF,IAAI,CAACL,IAAI,CACNM,GAAG,CAAY,6BAA6B,CAAC,CAC7CC,IAAI,CAACX,kBAAkB,EAAE,CAAC,CAC1BY,SAAS,CAAC;MACTC,IAAI,EAAEC,KAAK,IAAI,IAAI,CAACT,MAAM,CAACU,GAAG,CAACD,KAAK;KACrC,CAAC;EACN;EAEOE,MAAMA,CAACC,QAAiB;IAC7B,IAAI,CAACZ,MAAM,CAACa,MAAM,CAACJ,KAAK,IAAG;MACzB,OAAOA,KAAK,CAACK,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,QAAQ,CAACI,EAAE,CAAC;IACxD,CAAC,CAAC;EACJ;;AA3BWpB,cAAc,C;mBAAdA,cAAc,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;AAAA;AAAd1B,cAAc,C;SAAdA,cAAc;EAAA2B,OAAA,EAAd3B,cAAc,CAAA4B,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}